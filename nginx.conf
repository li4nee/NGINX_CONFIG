
# KEY VALUE PAIR IN NGINX = DIRECTIVES
# BLOCKS LIKE events , http = CONTEXTS

worker_processes auto; ## no of worker process that nginx should start with, how many parallel Nginx process should spawn to handle client requests. Suggested to keep it to the number of cores that your server has.
events{
	worker_connections 1024; ## for one worker process you can have 1024 simulataneous connections. If you have 4 worker processes then you can have 4*1024 = 4096 simultaneous connections.
}
http{
	include mime.types ; ## include the mime.types file which contains the mapping of file extensions to MIME types.Make the client understand the file types that are being served.attached in the response header.
	upstream nodejs_cluster{
		## load balancing algorithm. least_conn is used to distribute the load evenly among the servers. It will send the request to the server with the least number of active connections. Can be set to any other algorithm like round_robin and others as well , you can check in the documentation.
		
		server 127.0.0.1:3001; ## UPSTREAM SERVER ADRESSS. WHAT's upstream ? Upstream is the traffix going towards our application layer. What's downstream ? downstream is traffix going back to clinet application
		server 127.0.0.1:3002;
		server 127.0.0.1:3003;
	}
	server{
		listen 443 ssl ; ## default port nginx listens to is 80, you can change it to 8080 or any other port. 8080 to make it run alongside apache2 for my case.
		server_name localhostN; ## domain name or IP address of the server
		ssl_certificate /home/nishant/nginx-certs/nginx-selfsigned.crt; ## path to the ssl certificate file
		ssl_certificate_key /home/nishant/nginx-certs/nginx-selfsigned.key; ## path to the ssl certificate key file
		location /{
			proxy_pass http://nodejs_cluster ; ## location le chai gives us option to configure the location of the server. LIke to configure if it's proxy or actual server is done here.
			proxy_set_header Host $host; ## setting the header of the request. $host contains the actual route where the request is coming to and nginx forwards the original hostname requested by the client to the backend server.
			proxy_set_header X-Real-IP $remote_addr;  ## $remote_addr contains the IP address of the client that is making the request.If not set the backend will see the ip address of the nginx server.
		}
	}
	server {
		listen 8080;
		server_name localhost;
		location /{
			return 301 https://$host$request_uri; ## redirecting the http request to https request.
		}

	}
}


# GENERATE SSL CERTIFICATE USING OPENSSL 

# PASTE THIS IN TERMINAL
# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout nginx-selfsigned.key -out nginx selfsigned.crt 